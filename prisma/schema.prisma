generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  investor
  broker
  admin
  superadmin
}

enum AppointmentStatus {
  requested
  confirmed
  completed
  canceled
}

model AppUser {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         UserRole
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // onboarding
  firstName   String?
  lastName    String?
  phone       String?
  nationality String?
  recidence   String?

  resetToken          String?
  resetTokenExpiry    DateTime?
  emailVerified       Boolean   @default(false)
  onboardingCompleted Boolean   @default(false)

  investorProfile InvestorProfile?
  brokerProfile   BrokerProfile?
  adminProfile    AdminProfile?
  appointments    Appointment[]

  propertyStatuses UserPropertyStatus[]
  eventStatuses    UserEventStatus[]
  activityLogs     ActivityLog[]
}

model InvestorProfile {
  userId String @id
  user   AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  investorPreferences InvestorPreferences?
  properties          Property[]  // owned properties
}

model InvestorPreferences {
  investorProfileId String          @id
  investorProfile   InvestorProfile @relation(fields: [investorProfileId], references: [userId], onDelete: Cascade)

  investingInDubai       Boolean
  openToJointInvestments Boolean
  wantsAdvisorCall       Boolean
  interestedInEvents     Boolean
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model BrokerProfile {
  userId String @id
  user   AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminProfile {
  userId     String  @id
  department String?
  user       AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id                   String    @id @default(uuid())
  title                String
  description          String?
  area                 String?
  buildingName         String?
  developer            String?
  unitNo               String?
  floor                Int?
  condition            String?
  unitTotalSize        Float?
  apartmentSize        Float?
  balconySize          Float?
  serviceChargePerSqft Float?
  serviceChargeTotal   Float?
  rateYear             Int?
  status               String?
  rentValue            Float?
  contractValue        Float?
  depositReceived      Float?
  paymentMethod        String?
  rentStart            DateTime?
  rentExpiry           DateTime?
  latitude             Float?
  longitude            Float?
  city                 String?
  country              String?
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // ‚ùó owner is optional, survives if investor removed
  ownerId String?
  owner   InvestorProfile? @relation(fields: [ownerId], references: [userId], onDelete: SetNull)

  governmentLeases  GovernmentLease[]
  availabilitySlots AvailabilitySlot[]
  appointments      Appointment[]
  userStatuses      UserPropertyStatus[]
}

model GovernmentLease {
  id          String   @id @default(uuid())
  propertyId  String
  startDate   DateTime
  endDate     DateTime
  monthlyRent Float

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model AvailabilitySlot {
  id         String   @id @default(uuid())
  propertyId String
  startsAt   DateTime
  endsAt     DateTime
  capacity   Int      @default(1)

  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Appointment {
  id          String            @id @default(uuid())
  propertyId  String
  bookedById  String
  slotId      String?
  status      AppointmentStatus @default(requested)
  scheduledAt DateTime
  notes       String?

  property Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  bookedBy AppUser           @relation(fields: [bookedById], references: [id], onDelete: Cascade)
  slot     AvailabilitySlot? @relation(fields: [slotId], references: [id], onDelete: SetNull)
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  startsAt    DateTime
  endsAt      DateTime?
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userStatuses UserEventStatus[]
}

model UserPropertyStatus {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  seen       Boolean  @default(false)
  viewedAt   DateTime @default(now())

  user     AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([propertyId])
}

model UserEventStatus {
  id       String   @id @default(uuid())
  userId   String
  eventId  String
  seen     Boolean  @default(false)
  viewedAt DateTime @default(now())

  user  AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  type      String   // e.g. "property_viewed", "event_seen", "login"
  entityId  String?  // optional: link to property/event/etc
  metadata  Json?    // store extra details if needed
  createdAt DateTime @default(now())

  user AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([entityId])
}
